{"version":3,"sources":["components/Input.js","components/Calendar.js","components/NesDatePicker.js","App.js","serviceWorker.js","index.js"],"names":["Input","onFocus","value","dateString","toLocaleDateString","className","htmlFor","onChange","type","id","monthNames","getDaysOfPrevMonth","month","firstDayIndex","now","Date","setMonth","setDate","getDay","getFirstDayIndex","days","i","diffDate","getDate","push","getDays","getDaysOfMonth","slice","Calendar","onPickDate","hideCalendar","inputRef","useState","date","getMonth","setDays","calendarRef","useRef","useEffect","onMouseUp","e","isContain","current","contains","target","isContainInput","window","addEventListener","removeEventListener","ref","onClick","newDate","valueOf","getFullYear","map","item","index","isCurrentDate","key","NesDatePicker","currentDate","isShowCalendar","setIsShowCalendar","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39d10ac0.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Input = ({ onFocus, value }) => {\n  const dateString = value ? value.toLocaleDateString('en-US') : ''\n\n  return (\n    <div className=\"nes-field\">\n      <label htmlFor=\"name_field\">Pick a date</label>\n      <input\n        onChange={() => {}}\n        value={dateString}\n        onFocus={onFocus}\n        type=\"text\"\n        id=\"name_field\"\n        className=\"nes-input\"\n      />\n    </div>\n  )\n};\n\nInput.propTypes = {\n  onFocus: PropTypes.func,\n  value: PropTypes.object,\n};\n\nexport default Input;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst MAX_DAYS = 35;\n\nconst monthNames = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\nconst getDaysOfMonth = (month) => {\n  const days = [];\n  for (let i = 1; i <= MAX_DAYS; i++) {\n    const now = new Date();\n    now.setMonth(month);\n    now.setDate(i);\n    days.push(now);\n  }\n\n  return days;\n};\n\nconst getFirstDayIndex = (month) => {\n  const now = new Date();\n  now.setMonth(month);\n  now.setDate(1);\n\n  return now.getDay();\n};\n\nconst getDaysOfPrevMonth = (month) => {\n  const firstDayIndex = getFirstDayIndex(month);\n  const days = [];\n  for (let i = 0; i < firstDayIndex; i++) {\n    const now = new Date();\n    now.setMonth(month);\n    now.setDate(1);\n    const diffDate = firstDayIndex - i;\n    now.setDate(now.getDate() - diffDate);\n    days.push(now);\n  }\n\n  return days;\n};\n\nconst getDays = (month) => {\n  const days = [...getDaysOfPrevMonth(month), ...getDaysOfMonth(month)];\n\n  return days.slice(0, MAX_DAYS);\n};\n\nconst Calendar = ({ onPickDate, hideCalendar, inputRef }) => {\n  const [date, setDate] = useState(new Date());\n  const [days, setDays] = useState(getDays(date.getMonth()));\n  const calendarRef = useRef(null);\n  const now = new Date();\n\n  useEffect(() => {\n    const onMouseUp = (e) => {\n      const isContain =\n        calendarRef.current && calendarRef.current.contains(e.target);\n      const isContainInput =\n        inputRef.current && inputRef.current.contains(e.target);\n      if (isContain || isContainInput) {\n        return;\n      }\n      hideCalendar();\n    };\n    window.addEventListener(\"mouseup\", onMouseUp);\n\n    return () => window.removeEventListener(\"mouseup\", onMouseUp);\n  }, []);\n\n  useEffect(() => {\n    setDays(getDays(date.getMonth()));\n  }, [date]);\n\n  const onNextMonth = () => {\n    const newDate = new Date(date.valueOf());\n    newDate.setMonth(date.getMonth() + 1);\n    setDate(newDate);\n  };\n\n  const onPrevMonth = () => {\n    const newDate = new Date(date.valueOf());\n    newDate.setMonth(date.getMonth() - 1);\n    setDate(newDate);\n  };\n\n  return (\n    <div ref={calendarRef} className=\"date-picker\">\n      <div className=\"title\">\n        <div onClick={onPrevMonth} className=\"control\">\n          {\"<\"}\n        </div>\n        <div>{`${monthNames[date.getMonth()]} ${date.getFullYear()}`}</div>\n        <div onClick={onNextMonth} className=\"control\">\n          {\">\"}\n        </div>\n      </div>\n      <div className=\"day-of-week\">\n        <div>Su</div>\n        <div>Mo</div>\n        <div>Tu</div>\n        <div>We</div>\n        <div>Th</div>\n        <div>Fr</div>\n        <div>Sa</div>\n      </div>\n\n      <div className=\"days\">\n        {days.map((item, index) => {\n          const className =\n            item.getMonth() === date.getMonth() ? \"current-month\" : \" \";\n          const isCurrentDate =\n            item.getMonth() === now.getMonth() &&\n            item.getDate() === now.getDate();\n\n          return (\n            <div\n              onClick={() => onPickDate(item)}\n              key={index}\n              className={`nes-btn day ${className} ${\n                isCurrentDate ? \"is-primary\" : \"\"\n              }`}\n            >\n              {item.getDate()}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nCalendar.propTypes = {\n  onPickDate: PropTypes.func,\n  hideCalendar: PropTypes.func,\n  inputRef: PropTypes.any,\n};\n\nexport default Calendar;\n","import React, { useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Input from \"./Input\";\nimport Calendar from \"./Calendar\";\nimport \"nes.css/css/nes.min.css\";\nimport \"./date-picker.scss\";\n\nconst NesDatePicker = ({ currentDate }) => {\n  const inputRef = useRef(null);\n  const [isShowCalendar, setIsShowCalendar] = useState(false);\n  const [date, setDate] = useState(currentDate);\n\n  const onFocusInput = () => {\n    setIsShowCalendar(true);\n  };\n\n  const hideCalendar = () => {\n    setIsShowCalendar(false);\n  };\n\n  const onPickDate = (date) => {\n    setDate(date);\n    hideCalendar();\n  };\n\n  return (\n    <div className=\"nes-date-picker\">\n      <div ref={inputRef}>\n        <Input value={date} onFocus={onFocusInput} />\n      </div>\n      {isShowCalendar && (\n        <Calendar\n          inputRef={inputRef}\n          hideCalendar={hideCalendar}\n          onPickDate={onPickDate}\n        />\n      )}\n    </div>\n  );\n};\n\nNesDatePicker.propTypes = {\n  currentDate: PropTypes.object,\n};\n\nNesDatePicker.defaultProps = {\n  currentDate: null,\n};\n\nexport default NesDatePicker;\n","import React from 'react';\nimport './App.css';\nimport DatePicker from './components/NesDatePicker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DatePicker />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}