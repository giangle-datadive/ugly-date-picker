{"version":3,"sources":["components/DatePicker.js","App.js","serviceWorker.js","index.js"],"names":["monthNames","getDaysOfPrevMonth","month","firstDayIndex","now","Date","setMonth","setDate","getDay","getFirstDayIndex","days","i","diffDate","getDate","push","getDays","getDaysOfMonth","slice","DatePicker","useState","date","getMonth","setDays","useEffect","className","onClick","newDate","valueOf","getFullYear","map","item","index","isCurrentDate","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAKMA,G,MAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MACrD,MAAO,MAAO,MAAO,MAAO,MAAO,QAuB/BC,EAAqB,SAACC,GAG1B,IAFA,IAAMC,EATiB,SAACD,GACxB,IAAME,EAAM,IAAIC,KAIhB,OAHAD,EAAIE,SAASJ,GACbE,EAAIG,QAAQ,GAELH,EAAII,SAIWC,CAAiBP,GACjCQ,EAAO,GACLC,EAAI,EAAGA,EAAGR,EAAeQ,IAAK,CACpC,IAAMP,EAAM,IAAIC,KAChBD,EAAIE,SAASJ,GACbE,EAAIG,QAAQ,GACZ,IAAMK,EAAWT,EAAgBQ,EACjCP,EAAIG,QAAQH,EAAIS,UAAYD,GAC5BF,EAAKI,KAAKV,GAGZ,OAAOM,GAGHK,EAAU,SAACb,GAGf,MAFU,sBAAOD,EAAmBC,IAA1B,YApCW,SAACA,GAEtB,IADA,IAAMQ,EAAO,GACLC,EAAI,EAAGA,EARA,GAQaA,IAAK,CAC/B,IAAMP,EAAM,IAAIC,KAChBD,EAAIE,SAASJ,GACbE,EAAIG,QAAQI,GACZD,EAAKI,KAAKV,GAGZ,OAAOM,EA2BwCM,CAAed,KAElDe,MAAM,EA5CH,KAmGFC,EApDI,WAAO,IAAD,EACAC,mBAAS,IAAId,MADb,mBAChBe,EADgB,KACVb,EADU,OAECY,mBAASJ,EAAQK,EAAKC,aAFvB,mBAEhBX,EAFgB,KAEVY,EAFU,KAGjBlB,EAAM,IAAIC,KAEhBkB,qBAAU,WACRD,EAAQP,EAAQK,EAAKC,eACpB,CAACD,IAcJ,OACE,yBAAKI,UAAU,eACb,yBAAKA,UAAU,SACb,yBAAKC,QATS,WAClB,IAAMC,EAAU,IAAIrB,KAAKe,EAAKO,WAC9BD,EAAQpB,SAASc,EAAKC,WAAa,GACnCd,EAAQmB,IAMuBF,UAAU,WAAW,KAChD,uCAASxB,EAAWoB,EAAKC,YAAzB,YAAwCD,EAAKQ,gBAC7C,yBAAKH,QAjBS,WAClB,IAAMC,EAAU,IAAIrB,KAAKe,EAAKO,WAC9BD,EAAQpB,SAASc,EAAKC,WAAa,GACnCd,EAAQmB,IAcuBF,UAAU,WAAW,MAElD,yBAAKA,UAAU,eACb,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,oCAGF,yBAAKA,UAAU,QACZd,EAAKmB,KAAI,SAACC,EAAMC,GACf,IAAMP,EAAYM,EAAKT,aAAeD,EAAKC,WAAa,gBAAiB,IACnEW,EAAgBF,EAAKT,aAAejB,EAAIiB,YAAcS,EAAKjB,YAAcT,EAAIS,UAEnF,OACE,yBAAKoB,IAAKF,EAAOP,UAAS,cAASA,EAAT,YAAsBQ,EAAgB,eAAiB,KAAOF,EAAKjB,iB,MClF1FqB,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.deb514f5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './date-picker.scss'\r\n\r\nconst MAX_DAYS = 35\r\n\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n];\r\n\r\nconst getDaysOfMonth = (month) => {\r\n  const days = []\r\n  for(let i = 1; i< MAX_DAYS; i++) {\r\n    const now = new Date()\r\n    now.setMonth(month)\r\n    now.setDate(i)\r\n    days.push(now)\r\n  }\r\n\r\n  return days\r\n}\r\n\r\nconst getFirstDayIndex = (month) => {\r\n  const now = new Date()\r\n  now.setMonth(month)\r\n  now.setDate(1)\r\n\r\n  return now.getDay()\r\n}\r\n\r\nconst getDaysOfPrevMonth = (month) => {\r\n  const firstDayIndex = getFirstDayIndex(month)\r\n  const days = []\r\n  for(let i = 0; i< firstDayIndex; i++) {\r\n    const now = new Date()\r\n    now.setMonth(month)\r\n    now.setDate(1)\r\n    const diffDate = firstDayIndex - i\r\n    now.setDate(now.getDate() - diffDate)\r\n    days.push(now)\r\n  }\r\n\r\n  return days\r\n}\r\n\r\nconst getDays = (month) => {\r\n  const days = [...getDaysOfPrevMonth(month), ...getDaysOfMonth(month)]\r\n\r\n  return days.slice(0, MAX_DAYS)\r\n}\r\n\r\nconst DatePicker = () => {\r\n  const [date, setDate]= useState(new Date())\r\n  const [days, setDays] = useState(getDays(date.getMonth()))\r\n  const now = new Date()\r\n\r\n  useEffect(() => {\r\n    setDays(getDays(date.getMonth()))\r\n  }, [date])\r\n\r\n  const onNextMonth = () => {\r\n    const newDate = new Date(date.valueOf())\r\n    newDate.setMonth(date.getMonth() + 1)\r\n    setDate(newDate)\r\n  }\r\n\r\n  const onPrevMonth = () => {\r\n    const newDate = new Date(date.valueOf())\r\n    newDate.setMonth(date.getMonth() - 1)\r\n    setDate(newDate)\r\n  }\r\n\r\n  return (\r\n    <div className=\"date-picker\">\r\n      <div className=\"title\">\r\n        <div onClick={onPrevMonth} className=\"control\">{\"<\"}</div>\r\n        <div>{`${monthNames[date.getMonth()]} ${date.getFullYear()}`}</div>\r\n        <div onClick={onNextMonth} className=\"control\">{\">\"}</div>\r\n      </div>\r\n      <div className=\"day-of-week\">\r\n        <div>Su</div>\r\n        <div>Mo</div>\r\n        <div>Tu</div>\r\n        <div>We</div>\r\n        <div>Th</div>\r\n        <div>Fr</div>\r\n        <div>Sa</div>\r\n      </div>\r\n\r\n      <div className=\"days\">\r\n        {days.map((item, index) => {\r\n          const className = item.getMonth() === date.getMonth() ? 'current-month' :' '\r\n          const isCurrentDate = item.getMonth() === now.getMonth() && item.getDate() === now.getDate()\r\n\r\n          return (\r\n            <div key={index} className={`day ${className} ${isCurrentDate ? 'current-date' : ''}`}>{item.getDate()}</div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","import React from 'react';\nimport DatePicker from './components/DatePicker';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DatePicker/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}